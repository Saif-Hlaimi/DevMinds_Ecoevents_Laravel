pipeline {
    agent any

    stages {
        stage('Cleanup Workspace') {
            steps {
                echo "Cleaning workspace to free disk space..."
                deleteDir() 
                checkout scm
                echo "Checked out code from ${env.GIT_URL}. Workspace cleaned."
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner'
                    withSonarQubeEnv('sq1') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=DevMinds_Ecoevents_Laravel \
                            -Dsonar.projectName=DevMinds_Ecoevents_Laravel \
                            -Dsonar.sources=.
                        """
                    }
                    // Wait for Quality Gate result (enforces failure if gate fails)
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Quality Gate failed: ${qg.status}. Check ${env.SONAR_HOST_URL}/dashboard?id=${env.SONAR_PROJECT_KEY} for ${qg.statusReason}. Resolve issues before proceeding."
                        }
                    }
                }
            }
        }
        
        stage('Build Artifact') {
            steps {
                echo "Building Laravel artifact..."
                sh '''
                    # Install dependencies (they'll be excluded from zip to save space)
                    composer install --no-dev --optimize-autoloader
                    npm ci
                    npm run build
                    
                    # Additional exclusions for large/irrelevant files
                    find . -name "*.log" -delete  # Remove logs
                    find . -name "*.tmp" -delete  # Remove temps
                    
                    # Zip with more exclusions if needed (e.g., tests, docs)
                    zip -r ecoevents-artifact-${BUILD_NUMBER}.zip . \
                        -x "node_modules/*" "vendor/*" ".git/*" "storage/*" ".env*" \
                           "tests/*" "docs/*" "*.log" "*.tmp" "coverage/*"
                    
                    # Verify zip size and space
                    du -sh ecoevents-artifact-${BUILD_NUMBER}.zip
                    df -h .  # Check available space post-build
                '''
            }
        }
        
        stage('Publish to Nexus') {
            steps {
                echo "Uploading artifact to Nexus..."
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '192.168.33.10:8081', 
                    groupId: 'com.devminds',
                    version: "${BUILD_NUMBER}",
                    repository: 'maven-releases',  
                    credentialsId: 'nexus-credentials',  
                    artifacts: [
                        [artifactId: 'ecoevents-laravel',
                         classifier: '',
                         file: "ecoevents-artifact-${BUILD_NUMBER}.zip",
                         type: 'zip']
                    ]
                )
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'ecoevents-artifact-${BUILD_NUMBER}.zip', allowEmptyArchive: true
            echo "Pipeline completed. Check SonarQube dashboard for detailed report: http://192.168.33.10:9000/dashboard?id=DevMinds_Ecoevents_Laravel"
            cleanWs()  
        }
        success {
            echo "Quality Gate passed! Artifact published to Nexus. Ready for deploy."
        }
        failure {
            echo "Pipeline failed (e.g., Quality Gate, build error). Review SonarQube issues or logs. Run 'df -h' on agent for disk space."
        }
        unstable {
            echo "Pipeline unstable (e.g., Quality Gate warning or test flakiness). Fix issues and re-run."
        }
    }
}