pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Checked out code from ${env.GIT_URL}"
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner'
                    withSonarQubeEnv('sq1') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=DevMinds_Ecoevents_Laravel \
                            -Dsonar.projectName=DevMinds_Ecoevents_Laravel \
                            -Dsonar.sources=.
                        """
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                echo "Waiting for SonarQube quality gate response..."
                script {
                    def qg = waitForQualityGate abortPipeline: false  // Don't abort on timeout/fail
                    if (qg.status != 'OK') {
                        echo "Quality Gate status: ${qg.status}. Task ID: ${env.SONAR_TASK_ID}. Check: http://192.168.33.10:9000/api/ce/task?id=${env.SONAR_TASK_ID}"
                        unstable('Quality Gate did not pass')  // Marks build UNSTABLE (yellow) instead of FAILURE (red)
                    } else {
                        echo "Quality Gate passed!"
                    }
                }
                timeout(time: 2, unit: 'HOURS') {  // Longer timeout for processing
                    // The waitForQualityGate is already called above; this ensures polling doesn't hang forever
                }
            }
        }
    }
    
    post {
        always {
            echo "Pipeline completed. Check SonarQube dashboard for detailed report: http://192.168.33.10:9000/dashboard?id=DevMinds_Ecoevents_Laravel"
        }
        success {
            echo "Quality gate passed! Ready for next steps (e.g., build or Nexus upload)."
        }
        failure {
            echo "Pipeline failed. Review SonarQube issues."
        }
        unstable {
            echo "Pipeline unstable (e.g., Quality Gate warning). Proceed with caution."
        }
    }
}