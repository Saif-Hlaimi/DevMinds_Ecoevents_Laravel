pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Checked out code from ${env.GIT_URL}"
            }
        }
        
            stage('SonarQube Analysis') {
            steps {
                echo "Running static code analysis with SonarQube..."
                script {
                    def scannerHome = tool 'SonarScanner'  // References the global tool from Step 1
                    withSonarQubeEnv('sq1') {
                        withEnv(["PATH+SONAR=${scannerHome}/bin"]) {
                            sh "${scannerHome}/bin/sonar-scanner"  // Uses managed scanner
                        }
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                echo "Waiting for SonarQube quality gate response..."
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate abortPipeline: true 
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Pipeline completed. Check SonarQube dashboard for detailed report."
        }
        success {
            echo "Quality gate passed! Ready for next steps (e.g., build or Nexus upload)."
        }
        failure {
            echo "Quality gate failed. Review issues in SonarQube."
        }
    }
}